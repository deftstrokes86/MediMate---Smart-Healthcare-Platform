rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && request.auth.token.role == 'admin';
    }
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }
    function isDoctor() {
      return request.auth != null && request.auth.token.role == 'doctor';
    }

    // profiles/{uid}
    match /profiles/{uid} {
      allow read: if isOwner(uid) || isAdmin();
      allow create: if request.auth != null && request.auth.uid == uid
                    && request.resource.data.uid == request.auth.uid
                    && request.resource.data.role in ['patient','doctor','pharmacy','medical_lab','hospital','admin']
                    && request.resource.data.displayName is string
                    && request.resource.data.createdAt == request.time;
      allow update: if (isOwner(uid) && 
                       // owners may update non-sensitive fields only
                       !(request.resource.data.keys().hasAny(['isVerified','verificationStatus','verificationReviewedAt','verificationRequestedAt','kyc'])) )
                    || isAdmin();
    }

    // patients/{uid}
    match /patients/{uid} {
      allow read: if isOwner(uid) || isAdmin() || (isDoctor() && resource.data.matchedProviderId == request.auth.uid);
      allow create: if isOwner(uid)
                     && request.resource.data.keys().hasAll(['uid', 'location', 'matchStatus'])
                     && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(uid) || isAdmin() || (isDoctor() && resource.data.matchedProviderId == request.auth.uid);
      allow delete: if isOwner(uid) || isAdmin();
    }

    // kyc_docs/{uid}/{docId}
    match /kyc_docs/{uid}/{docId} {
      allow create: if (isOwner(uid) || isAdmin())
                    && request.resource.data.docId is string
                    && request.resource.data.storagePath is string
                    && request.resource.data.uploadedAt == request.time;
      allow update: if (isAdmin())
                    || (isOwner(uid)
                        && !(
                          request.resource.data.keys().hasAny(['virusScanStatus','ocrStatus','ocrRef'])
                        ));
      allow read: if isOwner(uid) || isAdmin();
    }

    // audits/{auditId} - write by server only, read by admin
    match /audits/{auditId} {
      allow create: if isAdmin(); // ideally written by server/admin functions
      allow read: if isAdmin();
      allow update, delete: if false;
    }

    // verifications/{uid}/{version}
    match /verifications/{uid}/{versionId} {
      allow read: if isOwner(uid) || isAdmin();
      allow create, update: if isAdmin(); // server-only
    }

    // organizations/{orgId}
    match /organizations/{orgId} {
      allow read: if request.auth != null;
      allow create: if isAdmin();
      allow update: if isAdmin();
    }
  }
}
