rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for checking user roles and ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return request.auth.token.role == 'admin' || request.auth.token.role == 'super_admin';
    }

    function isDoctor() {
      return request.auth.token.role == 'doctor';
    }
    
    function isPatient() {
        return request.auth.token.role == 'patient';
    }

    // Profiles Collection
    match /profiles/{userId} {
      // Admins can read/write any profile
      allow read, write: if isAdmin();
      
      // Authenticated users can read their own profile
      allow read: if isOwner(userId);

      // Users can create their own profile
      allow create: if isOwner(userId);

      // Users can update their own profile, but cannot change sensitive fields
      allow update: if isOwner(userId)
                    && request.resource.data.isVerified == resource.data.isVerified
                    && request.resource.data.verificationStatus == resource.data.verificationStatus
                    && request.resource.data.role == resource.data.role;
    }

    // Users Collection (contains basic auth info and roles object)
    match /users/{userId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if request.auth.uid == userId;
    }
    
    // Admin Invites
    match /adminInvites/{token} {
        allow read, write: if isAdmin();
        // Allow unauthenticated reads only for token validation on the client
        allow get: if !exists(/databases/$(database)/documents/adminInvites/$(token)) || resource.data.status == 'valid';
    }

    // Patient-specific collections
    match /encounters/{encounterId} {
        allow read, write: if isPatient() && resource.data.patientId == request.auth.uid;
    }
    
    match /orders/{orderId} {
        allow read, write: if isPatient() && resource.data.patientId == request.auth.uid;
    }

    match /messages/{messageId} {
        allow read, write: if isPatient() && resource.data.userId == request.auth.uid;
    }

    // Doctor-specific collections
    match /appointments/{appointmentId} {
      // Admins can manage all appointments
      allow read, write: if isAdmin();
      // Doctors can manage their own appointments
      allow read, write: if isDoctor() && resource.data.doctorId == request.auth.uid;
      // Patients can read their own appointments
      allow read: if isPatient() && resource.data.patientId == request.auth.uid;
    }

    match /prescriptions/{prescriptionId} {
      // Admins can manage all prescriptions
      allow read, write: if isAdmin();
      // Doctors can manage their own prescriptions
      allow read, write: if isDoctor() && resource.data.doctorId == request.auth.uid;
      // Patients can read their own prescriptions
      allow read: if isPatient() && resource.data.patientId == request.auth.uid;
    }
    
    // Fictional 'patients' collection for doctors
    // A doctor would likely query the `profiles` collection, but if they had a subcollection of patients:
    match /doctors/{doctorId}/assignedPatients/{patientId} {
        allow read, write: if isDoctor() && doctorId == request.auth.uid;
    }

  }
}
